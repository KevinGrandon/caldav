#! /usr/bin/env node


/**
 * The intent of this script is to test some
 * basic operations on a given server to see how
 * well we can interact with them out of the box.
 *
 * As our detection capabilities evolve this script
 * should be smaller and simpler.
 */

var CalDav = require('../lib/caldav');
var configurations = JSON.parse(require('fs').readFileSync(
  __dirname + '/test-configs.json', 'utf8'
));

var connectionType = process.argv[2];

if (!connectionType || !(connectionType in configurations)) {
  console.error(
    'You must choose an available configuration:',
    Object.keys(configurations)
  );
  process.exit(1);
}

var config = configurations[connectionType];

var con = new CalDav.Connection({
  domain: config.domain,
  user: config.user,
  password: config.password
});

var Propfind = CalDav.Request.Propfind;
var CalendarHome = CalDav.Request.CalendarHome;

function getCalendarDetails(caluri) {

  var calFind = findProp(caluri);
  calFind.prop(['ical', 'calendar-color']);
  calFind.prop('owner');
  calFind.prop('current-user-privilege-set');
  calFind.prop(['caldav', 'calendar-description']);
  calFind.prop(['caldav', 'calendar-timezone']);
  calFind.prop('displayname');
  calFind.prop('resourcetype');
  calFind.prop(['calserver', 'getctag']);
  calFind.depth = 1;


  // found calendar home find calendars.
  calFind.send(function(err, data) {
    var url, name;

    for (url in data) {
      if (data[url].resourcetype.value.indexOf('calendar') !== -1) {
        name = data[url].displayname.value.value;
        console.log('CAL RESOURCE:', name, '-', url);
      }
    }
    console.log('DATA:');
    console.log(JSON.stringify(data));
    //console.log('RAW:');
    //console.log(calFind.xhr.xhr.responseText);
  });

}

function findProp(uri) {
  return new Propfind(con, {
    url: uri || config.uri
  });
}

function getProp(propName, obj, single) {
  var key, url, level, results = {};

  for (url in obj) {
    level = obj[url];
    for (key in level) {
      if (key === propName && level[key].status) {
        results[url] = level[key].value;
        if (single) {
          return results[url];
        }
      }
    }
  }

  return results;
}

var home = new CalendarHome(con, {
  url: config.uri
});

home.send(function(err, data) {
  console.log('CALENDAR_HOME:', data);
  getCalendarDetails(data.url);
});
